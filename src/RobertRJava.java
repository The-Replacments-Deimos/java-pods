public class RobertRJava {
    public static void main(String[] args) {
//        Problem 1
        System.out.println(flipEndChars("Cat, dog, and mouse."));
        System.out.println(flipEndChars("ada"));
        System.out.println(flipEndChars("Ada"));
        System.out.println(flipEndChars("z"));
        System.out.println();
//        Problem 2
        int[] a = {0, 3, 1, 2};
        System.out.println(remix("abcd", a));
        int[] b = {1, 3, 0, 2};
        System.out.println(remix("PlOt", b));
        int[] c = {0, 2, 1, 5, 3, 6, 7, 4};
        System.out.println(remix("computer", c));
        System.out.println();

//        Problem 3
        System.out.println(lookAndSay("1211"));
        System.out.println(lookAndSay("111221"));
        System.out.println(lookAndSay("31131211131221"));
        System.out.println();

    }

    //    Problem 1
//    site: https://edabit.com/challenge/c52kNwPuWo5kp9x4H
//    Problem: Switcharoo
//    Create a function that takes a string and returns a new string with its first and last characters swapped,
//    except under three conditions:
//    1. If the length of the string is less than two, return "Incompatible.".
//    2. If the first and last characters are the same, return "Two's a pair.".
    private static String flipEndChars(String str) {
        if (str.length() < 2) {
            return "Incompatible.";
        }
        char firstChar = str.charAt(0);
        char lastChar = str.charAt(str.length() - 1);
        if (firstChar == lastChar) {
            return "Two\'s a pair.";
        }
        return lastChar + str.substring(1, str.length() - 1) + firstChar;
    }

    //    problem 2
//    site: https://edabit.com/challenge/zRjZb4NXtfMjGAMGb
//    Problem: Remix the String
//    Create a function that takes both a string and an array of numbers as arguments. Rearrange the letters in
//    the string to be in the order specified by the index numbers. Return the "remixed" string.
    private static String remix(String str, int[] arr) {
        StringBuilder sb = new StringBuilder();
        char[] charArray = new char[arr.length];
        for (int i = 0; i < arr.length; i++) {
            charArray[i] = str.charAt(arr[i]);
            sb.append(charArray[i]);
        }
//        String returnString = charArray.toString();
//        return returnString;
        return sb.toString();

    }

    //    problem 3
//    site: https://edabit.com/challenge/PRWwoRZnnh5eyyRbD
//    Problem: Look-And-Say Sequence
//    The look-and-say sequence is generated by describing each group of identical digits in the previous term.
//    If we start at "1", the first five terms in the sequence are:
//    "1" = "one 1" = "11"
//    "11" = "two 1's" = "21"
//    "21" = "one 2, one 1" = "1211"
//    "1211" = "one 1, one 2, two 1's" = "111221"
//    "111221" = "three 1's, two 2's, one 1" = "312211"
    private static String lookAndSay(String str) {
        int[] numArray = new int[str.length()];
        char[] charArray = new char[str.length()];

        for (int i = 0; i < str.length(); i++) {
            charArray[i] = str.charAt(i);
            numArray[i] = Character.getNumericValue(charArray[i]);
        }

        int[] numVal = new int[str.length()];
        int[] numRepeat = new int[str.length()];
        int currentNum = 0;
        int currentRepeat = 0;
        int indexNum = 0;

        for (int j = 0; j < str.length(); j++) {
            if (j == 0) {
                currentNum = numArray[j];
                currentRepeat++;
            } else if (currentNum != numArray[j]) {
                numVal[indexNum] = currentNum;
                numRepeat[indexNum] = currentRepeat;
                indexNum++;

                currentNum = numArray[j];
                currentRepeat = 1;
            } else {
                currentRepeat++;
            }
            if (j == str.length() - 1) {
                numVal[indexNum] = currentNum;
                numRepeat[indexNum] = currentRepeat;
                indexNum++;
            }
        }
        StringBuilder sb = new StringBuilder();
        int[] combineArrays = new int[indexNum * 2];
        int scrapCount = 0;

        for (int k = 0; k < indexNum * 2; k++) {
            if (k % 2 == 0) {
                combineArrays[k] = numRepeat[scrapCount];
                sb.append(combineArrays[k]);
            } else {
                combineArrays[k] = numVal[scrapCount];
                sb.append(combineArrays[k]);
                scrapCount++;
            }
        }


        return sb.toString();
    }

}
